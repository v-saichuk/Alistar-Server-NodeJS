import puppeteer from 'puppeteer';
import fs from 'fs/promises';
import { existsSync, readFileSync } from 'fs';
import XLSX from 'xlsx';
import path from 'path';
import Product from '../../../models/Product.js';

// –ö—ñ–ª—å–∫—ñ—Å—Ç—å sku –≤ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ 10
const skuCount = 10;
//  parseFiberMall - –ø–∞—Ä—Å–∏—Ç—å —Ü—ñ–Ω–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ https://www.fibermall.com/buy-[sku].htm —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –≤ —Ñ–∞–π–ª sku_prices.json
const parseFiberMall = async () => {
    try {
        // –ó—á–∏—Ç—É—î–º–æ –≤—Å—ñ SKU –∑ —Ñ–∞–π–ª—É
        const allSkus = JSON.parse(await fs.readFile('./all_skus.json', 'utf-8'));
        const results = [];
        // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ WebSocket endpoint
        const browser = await puppeteer.connect({
            browserWSEndpoint: 'ws://localhost:9222/devtools/browser/b556a8b0-e48a-4fde-a337-4f67292e5d91',
            defaultViewport: null,
            headless: true,
        });

        const progressTable = [];
        for (let i = 0; i < allSkus.length; i++) {
            const sku = allSkus[i];
            let status = 'processing';
            let message = '–ü–æ—á–∏–Ω–∞—é –æ–±—Ä–æ–±–∫—É';
            let price = 0;
            progressTable.push({
                '#': i + 1,
                sku,
                status,
                price,
                message,
            });
            console.clear();
            console.table(progressTable.slice(-skuCount));
            const page = await browser.newPage();
            // –ë–ª–æ–∫—É—î–º–æ –≤—Å—ñ —Ä–µ—Å—É—Ä—Å–∏ –æ–∫—Ä—ñ–º html
            await page.setRequestInterception(true);
            page.on('request', (req) => {
                if (req.resourceType() === 'document') {
                    req.continue();
                } else {
                    req.abort();
                }
            });
            let found = false;
            try {
                await page.goto(`https://www.fibermall.com/buy-${sku}.htm`, { waitUntil: 'networkidle2', timeout: 60000 });

                // –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
                const productLinks = await page.$$eval('ul#con_one_2 li.new_proList_mainListLi .new_proList_ListImg a', (links) =>
                    links.map((a) => a.getAttribute('href')),
                );
                if (productLinks.length === 0) {
                    status = 'not found';
                    message = '–¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –ø–æ—à—É–∫—É';
                }

                for (const link of productLinks) {
                    if (!link) continue;
                    const productPage = await browser.newPage();
                    // –ë–ª–æ–∫—É—î–º–æ –≤—Å—ñ —Ä–µ—Å—É—Ä—Å–∏ –æ–∫—Ä—ñ–º html –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ —Ç–æ–≤–∞—Ä—É
                    await productPage.setRequestInterception(true);
                    productPage.on('request', (req) => {
                        if (req.resourceType() === 'document') {
                            req.continue();
                        } else {
                            req.abort();
                        }
                    });
                    try {
                        await productPage.goto(`https://www.fibermall.com${link}`, { waitUntil: 'networkidle2', timeout: 60000 });
                        // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ SKU
                        const pageSku = await productPage.$$eval('span', (spans) => {
                            for (const el of spans) {
                                const match = el.textContent.match(/SKU:(\d+)/);
                                if (match) return match[1];
                            }
                            return null;
                        });
                        if (pageSku && String(pageSku) === String(sku)) {
                            // –í–∑—è—Ç–∏ —Ü—ñ–Ω—É
                            const priceVal = await productPage.$eval('#productsbaseprice span[data-price]', (el) =>
                                parseFloat(el.getAttribute('data-price')),
                            );
                            price = isNaN(priceVal) ? 0 : priceVal;
                            found = true;
                            status = 'found';
                            message = `–ó–Ω–∞–π–¥–µ–Ω–æ!`;
                            await productPage.close();
                            break;
                        }
                    } catch (e) {
                        // ignore
                    }
                    await productPage.close();
                }

                if (!found) {
                    status = 'not found';
                    message = message || '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —Ü—ñ–Ω–∞ –≤—ñ–¥—Å—É—Ç–Ω—è';
                }
                results.push({ sku, price, isFound: found });
            } catch (e) {
                status = 'error';
                message = '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ';
                results.push({ sku, price: 0, isFound: false });
            }
            await page.close();
            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ä—è–¥–æ–∫ —É —Ç–∞–±–ª–∏—Ü—ñ
            progressTable[i] = {
                '#': i + 1,
                sku,
                status,
                price,
                message,
            };
            console.clear();
        }

        await browser.disconnect();
        await fs.writeFile('./sku_prices.json', JSON.stringify(results, null, 2));
        console.log('‚úÖ –ì–æ—Ç–æ–≤–æ! –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É sku_prices.json');
        process.exit(0);
    } catch (error) {
        console.error('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞:', error);
    }
};

// parseFiberMall().catch(console.error);
// node index.js  –∑–∞–ø—É—Å–∫ —Ç–æ–º—É —â–æ —è–∫—â–æ —á–µ—Ä–µ–∑ –Ω–æ–¥–µ–º–æ–Ω —Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—Ç—å—Å—è —ñ –ø–æ—á–∏–Ω–∞—î –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∫–æ–¥ –ø–æ –Ω–æ–≤–æ–º—É

/**
 * –û–±—Ä–æ–±–ª—è—î —Ñ–∞–π–ª sku_prices.json:
 * 1. –§—ñ–ª—å—Ç—Ä—É—î —Ç–æ–≤–∞—Ä–∏ –∑ isFound: false —ñ —Å—Ç–≤–æ—Ä—é—î Excel —Ñ–∞–π–ª
 * 2. –û–Ω–æ–≤–ª—é—î —Ü—ñ–Ω–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ isFound: true
 */
const processSkuPricesFile = async () => {
    try {
        // –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª sku_prices.json
        const skuPricesPath = path.join(process.cwd(), 'sku_prices.json');

        if (!existsSync(skuPricesPath)) {
            throw new Error('–§–∞–π–ª sku_prices.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        const skuPricesData = JSON.parse(readFileSync(skuPricesPath, 'utf8'));

        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ isFound: false
        const notFoundProducts = skuPricesData.filter((item) => !item.isFound);

        let excelFileName = null;

        // –°—Ç–≤–æ—Ä—é—î–º–æ Excel —Ñ–∞–π–ª –¥–ª—è —Ç–æ–≤–∞—Ä—ñ–≤, —è–∫—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ
        if (notFoundProducts.length > 0) {
            excelFileName = await createExcelFile(notFoundProducts);
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Ü—ñ–Ω–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ isFound: true
        const foundProducts = skuPricesData.filter((item) => item.isFound);
        const updateResult = await updateProductPrices(foundProducts);

        // –í–∏–≤–æ–¥–∏–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É —Ç–∞–±–ª–∏—Ü—é –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        console.log('\n' + '='.repeat(60));
        console.log('üìä –†–û–ë–û–¢–£ –ó–ê–ö–Ü–ù–ß–ï–ù–û - –§–Ü–ù–ê–õ–¨–ù–ê –ó–í–Ü–¢–ù–Ü–°–¢–¨');
        console.log('='.repeat(60));

        const summaryTable = [
            { Parameter: 'Total', Value: skuPricesData.length },
            { Parameter: 'Updated', Value: updateResult.updatedCount },
            { Parameter: 'Not found', Value: notFoundProducts.length },
            { Parameter: 'Not in DB', Value: updateResult.notFoundInDB },
            { Parameter: 'Excel file', Value: excelFileName || 'Not created' },
        ];

        console.table(summaryTable);
        console.log('='.repeat(60));

        return {
            success: true,
            summary: {
                totalProducts: skuPricesData.length,
                foundProducts: foundProducts.length,
                notFoundProducts: notFoundProducts.length,
                updatedInDB: updateResult.updatedCount,
                notFoundInDB: updateResult.notFoundInDB,
                excelFileCreated: excelFileName,
            },
        };
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É sku_prices.json:', error);
        throw error;
    }
};

/**
 * –°—Ç–≤–æ—Ä—é—î Excel —Ñ–∞–π–ª –∑ —Ç–æ–≤–∞—Ä–∞–º–∏, —è–∫—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ
 */
const createExcelFile = async (notFoundProducts) => {
    const workbook = XLSX.utils.book_new();

    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è Excel –∑ –ø–æ—à—É–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    const excelData = [];

    for (const item of notFoundProducts) {
        try {
            // –®—É–∫–∞—î–º–æ –ø—Ä–æ–¥—É–∫—Ç –∑–∞ SKU –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
            const product = await Product.findOne({ sku: item.sku });

            const excelRow = {
                SKU: item.sku,
                '–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞': item.price,
                –°—Ç–∞—Ç—É—Å: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ FiberMall',
                '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å': product ? `https://admin.alistar.ltd/product/${product._id}` : '–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö',
            };

            excelData.push(excelRow);
        } catch (error) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É SKU ${item.sku} –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö:`, error);
            excelData.push({
                SKU: item.sku,
                '–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞': item.price,
                –°—Ç–∞—Ç—É—Å: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ FiberMall',
                '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å': '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö',
            });
        }
    }

    const worksheet = XLSX.utils.json_to_sheet(excelData);
    XLSX.utils.book_append_sheet(workbook, worksheet, '–¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ');

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ Excel —Ñ–∞–π–ª
    const excelFileName = `not_found_products_${new Date().toISOString().split('T')[0]}.xlsx`;
    const excelFilePath = path.join(process.cwd(), excelFileName);
    XLSX.writeFile(workbook, excelFilePath);

    console.log(`–°—Ç–≤–æ—Ä–µ–Ω–æ Excel —Ñ–∞–π–ª: ${excelFileName} –∑ ${notFoundProducts.length} —Ç–æ–≤–∞—Ä–∞–º–∏`);

    return excelFileName;
};

/**
 * –û–Ω–æ–≤–ª—é—î —Ü—ñ–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
 */
const updateProductPrices = async (foundProducts) => {
    let updatedCount = 0;
    let notFoundInDB = 0;

    for (const item of foundProducts) {
        try {
            // –®—É–∫–∞—î–º–æ –ø—Ä–æ–¥—É–∫—Ç –∑–∞ SKU
            const product = await Product.findOne({ sku: item.sku });

            if (product) {
                // –û–Ω–æ–≤–ª—é—î–º–æ —Ü—ñ–Ω—É
                await Product.updateOne({ _id: product._id }, { $set: { price: item.price } });
                updatedCount++;
                console.log(`–û–Ω–æ–≤–ª–µ–Ω–æ —Ü—ñ–Ω—É –¥–ª—è SKU ${item.sku}: ${item.price}`);
            } else {
                notFoundInDB++;
                console.log(`SKU ${item.sku} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö`);
            }
        } catch (error) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ SKU ${item.sku}:`, error);
        }
    }

    return { updatedCount, notFoundInDB };
};

// processSkuPricesFile().catch(console.error);
